/*
 * Copyright (c) 2016 Dries007 & DoubleDoorDevelopment
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *  * Neither the name of Pay2Spawn nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
    }
}

import groovy.json.*

apply plugin: "net.minecraftforge.gradle.forge"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "3.0.1"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

group = "net.doubledoordev"
archivesBaseName = "Pay2Spawn"

minecraft {
    version = "1.10.2-12.18.2.2099"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_29"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
}

dependencies {
    compile "com.googlecode.soundlibs:jlayer:1.0.1.4"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    include "LICENSE"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    doLast {
        def updateFile = new File(project.archivesBaseName + '.json')
        def json;
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        }
        else {
            def builder = new JsonBuilder()
            json = builder(
                    homepage: "http://doubledoordev.net/",
                    promos: new HashMap<>()
            )
        }
        def outStream = new ByteArrayOutputStream()
        def result = exec {
            executable = 'git'
            args = [ 'log', '-n', '1', "--format='%B'"]
            standardOutput = outStream
        }
        def fullLog = outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")

        json['promos'][project.minecraft.version + '-latest'] = project.version
        json['promos'][project.minecraft.version + '-recomended'] = project.version
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        def version = json[project.minecraft.version]
        version.put(project.version, fullLog)
        updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
    }
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    classifier "dev"
    appendix = project.minecraft.version
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.doubledoordev.pay2spawn.asm.Plugin'
    }
    from { (configurations.compile).filter { it.name.contains("jlayer") }.collect { zipTree(it) }}
}
sourceJar {
    exclude("com/**")
    classifier "src"
    appendix = project.minecraft.version
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.doubledoordev.pay2spawn.asm.Plugin'
    }
    from { (configurations.compile).filter { it.name.contains("jlayer") }.collect { zipTree(it) }}
}
jar {
    exclude("com/**")
    appendix = project.minecraft.version
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.doubledoordev.pay2spawn.asm.Plugin'
    }
    from { (configurations.compile).filter { it.name.contains("jlayer") }.collect { zipTree(it) }}
}

artifacts {
    archives deobfJar
}
